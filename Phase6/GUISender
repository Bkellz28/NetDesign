# import socket library and checksum function
from tkinter import *
from PIL import Image
from PIL import ImageTk
from CheckSumUtility import *
from socket import *
import time
import random
from threading import Timer
import threading

root = Tk()
root.title("Phase 5: Network Design // Group 7")
root.configure(bg='white')
root.geometry("700x300")

label1 = Label(root, text='Insert Image Path Below:', bg='white')
label1.place(x=10, y=10)

imgpath = Entry(root, width=50)
imgpath.place(x=10, y=30)

def myClick():
    label2 = Label(root, text='Packets with Sender:', font=("calibri", 18), bg='white')
    label2.place(x=10, y=200)
    label3 = Label(root, text='Packets with Receiver:', font=("calibri", 18), bg='white')
    label3.place(x=450, y=200)
    button1.place(x=1000, y=1000)
    label4 = Label(root, text='Path Submitted!', bg='white')
    label4.place(x=330, y=20)
    global before
    before = time.time()
    receivethread().start()


def tSend():
    imagepath = imgpath.get()  #####*********
    prev = Image.open(imagepath)
    prev2 = prev.resize((125, 125))
    prev22 = ImageTk.PhotoImage(prev2)
    logo = Label(image=prev22, bg='white')
    logo.place(x=270, y=60)
    imgpath2 = Entry(root, width=50)
    imgpath2.place(x=10, y=30)
    pathL=Label(root, text='Image path taken:', bg='white')
    pathL.place(x=10, y=75)
    packL = Label(root, text='Total # of packets:', bg='white')
    packL.place(x=10, y=100)
    prevL = Label(root, text='Image being sent:', bg='white')
    prevL.place(x=10, y=125)
    prevL2 = Label(root, text='------------------------->', bg='white', fg='green')
    prevL2.place(x=125, y=125)
    pathL2 = Label(root, text=imagepath, bg='white', fg='green')
    pathL2.place(x=125, y=75)

    img = open(imagepath, 'rb')  # open img
    imgData = img.read()  # read data of img
    sndrName = '127.0.0.1'
    sndrPort = 10420
    Sender = RDT3(sndrName, sndrPort, 10, 0.03, 1, 1)  # timeout of 0.03 is pretty good
    sendAddr = (sndrName, 10421)  # assign receiver
    Sender.rdt_send(imgData, sendAddr)


button1 = Button(root, text='Submit Path', command=myClick)
button1.place(x=330, y=20)


# updated RDT protocol to rdt2.3
class RDT3:
    def __init__(self, hostName, portNum, frameSize, timeoutVal, errorMode=1, debugToggle=0):
        self.host = hostName
        self.port = portNum
        # open socket for use
        self.UDPsocket = socket(AF_INET, SOCK_DGRAM)
        # keep track of debugToggle (1 for debug messages, 0 for none)
        self.debug = debugToggle
        self.timeout = timeoutVal
        self.erMode = errorMode
        self.frame = frameSize

    # data file send
    def rdt_send(self, sendData, receiver):
        # TIMEOUT ERROR SIMULATION (ERROR MODE 4)
        # ASSIGN PERCENT ERROR HERE (10% is huge, results in >5min send time)
        errorPcnt = 10

        ## CUT UP DATA AND SEND INITIAL MESSAGE TO RECEIVER
        ########
        db = self.debug  # grab debug val
        # calc num packets, data length / 1024 bytes
        length = len(sendData)
        numPack = length // int(1024)
        # add extra packet for any leftover bytes
        if (length % 1024 != 0): numPack += 1
        maxPack = numPack
        passer = numPack

        packL2 = Label(root, text=numPack, bg='white', fg='green')
        packL2.place(x=125, y=100)

        sendPackL = Label(root, text=numPack, font=("calibri", 18), bg='white', padx=20)
        sendPackL.place(x=75, y=235)

        recPackL = Label(root, text=maxPack-numPack, font=("calibri", 18), bg='white', padx=20)
        recPackL.place(x=525, y=235)

        # send numPack to receiver to start the data transfer
        self.UDPsocket.sendto(str(numPack).encode(), receiver)
        if (db == 1): print(str(numPack) + ' packets to send...')
        # create list of packets to send
        sendList = []
        for i in range(numPack):
            packStart = i * 1024  # packet start index
            packEnd = (i + 1) * 1024  # packet end index
            packet = sendData[packStart:packEnd]  # parse packet
            sendList.append(packet)  # add packet to list
        # check that sendList is same size as numPack
        if (len(sendList) != numPack):
            print('ERROR: packet list does not match estimated packet size')
            print('Ending send call...')
            return
        elif (len(sendList) == numPack and db == 1):
            print('Data successfully parsed into packets...')

        ## GO-BACK-N SENDING ALGORITHM
        #############
        # set socket to non-blocking
        self.UDPsocket.setblocking(0)
        # grab frame number
        N = self.frame
        # start sending packets with go-back-N algorithm
        sn = 0  # init identifier as 0, will count up to numPack-1
        base = 0  # init go-back-n frame base as first packet
        sendTime = -1  # init sendTime for timeout handling
        while True:
            # check if next packet to send is within frame
            if sn < (base + N):
                # send packet and iterate sn
                try:
                    msg = sendList[sn]
                except:
                    nothing = 0
                packet = self.packetize(msg, sn)
                self.UDPsocket.sendto(packet, receiver)

                sn = sn + 1
                # start timer if base of frame
                if sn == base: sendTime = time.time()

            # try to receive ack, do nothing if none available
            ackRcvd = 0
            recvSn = -1  # init for use outside of try
            recvCS = -1  # init for use outside of try
            try:
                # receive ack msg
                recvPacket, recvAddr = self.UDPsocket.recvfrom(14)
                recvSn, recvCS, recvAck = self.depacketize(recvPacket)
                # IMPLEMENT ACK LOSS SIMULATION
                randy = random.randrange(1, 100, 1)
                if (self.erMode == 4 and randy < errorPcnt):
                    ackRcvd = 0  # do nothing with ack to simulate a loss
                    print("ACK packet lost...")
                else:
                    ackRcvd = 1
            except:
                ackRcvd = 0  # do nothing if no ack available

            # handle ack if one was received
            if ackRcvd == 1:
                # check for corruption
                if int(recvCS, 2) != 0:
                    # ack is corrupted, simply discard
                    if (db == 1): print('ERROR: ACK msg corrupted, discarding...')
                elif recvSn < base:
                    # ack is not for current base, simply discard
                    if (db == 1): print('ERROR: Expected ACK' + str(base) + ' but received ACK' + str(recvSn))
                else:
                    # otherwise ACK is for current base, can now iterate and reset timer
                    base = recvSn + 1
                    sendTime = time.time()

                    passer = base
                    #passer = passer - 1
                    if maxPack - passer == 100:
                        label4 = Label(root, text='Path Submitted!', bg='white', fg='white')  # in white to clear
                        label4.place(x=330, y=20)

                    if passer == -1:
                        after = time.time()
                        totalTime = round(after - before, 3)
                        print('Image sent in ' + str(totalTime) + ' seconds!')
                        sendPackL2 = Label(root, text='All Sent!', font=("calibri", 18), bg='white', fg='green',
                                           padx=20)
                        sendPackL2.place(x=65, y=235)
                        sendPackL3 = Label(root, text='Time spent:', font=("calibri", 12), bg='white', padx=20)
                        sendPackL3.place(x=5, y=275)
                        merge = str(totalTime) + ' seconds'
                        sendPackL4 = Label(root, text=merge, font=("calibri", 12), bg='white', fg='blue')
                        sendPackL4.place(x=110, y=275)

                    if passer < maxPack + 1:
                        sendPackL = Label(root, text=maxPack - passer, font=("calibri", 18), bg='white', padx=20)
                        sendPackL.place(x=75, y=235)

                        recPackL = Label(root, text=passer, font=("calibri", 18), bg='white', padx=20)
                        recPackL.place(x=525, y=235)




                    # IF LAST ACK, EXIT WHILE LOOP
                    if base == numPack: break

            # check for and handle timeout
            if (time.time() - sendTime) >= self.timeout:
                # resend already sent packets in the frame and restart timer
                for i in range(base, sn - 1):
                    try:
                        msg = sendList[i]
                    except:
                        nothing = 0
                    packet = self.packetize(msg, i)
                    self.UDPsocket.sendto(packet, receiver)

                # restart timer
                sendTime = time.time()

        # end of algorithm
        if (db == 1): print('All packets sent!')

    # CREATE PACKET FUNCTION
    # "packetizes" data, checksum, and seq num into a single packet
    # first calculates the checksum of the data
    def packetize(self, data, sn):
        # convert seq num to 2bytes
        snBy = sn.to_bytes(2, byteorder='big', signed=False)
        # convert data to bits for checksum calculation
        dataBi = bin(int(data.hex(), 16))
        # calculate and convert checksum to bytes
        cs = checksum(dataBi)  # calc checksum
        csBy = int(cs, 2).to_bytes(4, byteorder='big', signed=False)
        # DATA IS CORRUPTED AFTER CHECKSUM TO PROPERLY SIMULATE BIT ERROR
        # FIRST INPUT AFTER DATA IS ERMODE INPUT FROM CONSTRUCTOR
        # SECOND INPUT IS % ERROR

        data = self.corrupt(data, self.erMode, 10)

        # create and return full packet
        packet = snBy + csBy + data
        # print(len(packet))
        return packet

    # DECONSTRUCT PACKET FUNCTION
    # "depacketizes" data, checksum, and seq num
    def depacketize(self, packet):
        # grab raw pieces
        snRaw = packet[0:2]
        csRaw = packet[2:6]
        msg = packet[6:]
        # convert seq num back to integer
        sn = int(snRaw.hex(), 16)
        # convert received checksum to binary (cut off 0b binary string header)
        recvCs = bin(int(csRaw.hex(), 16))[2:]  # [2:] skips '0b'
        recvCs = binarySize(recvCs, 32)  # add leading 0s if needed
        # calculate checksum of the data and compare to received checksum
        msgBi = bin(int(msg.hex(), 16))
        cs = checksum(msgBi, recvCs)
        # return formatted seq num and header
        # no need to format the msg data any further
        return sn, cs, msg

    # CORRUPTION FUNCTION
    # 3 mode: 1, 2, and 3
    # Mode 1: no corruption
    # Mode 2: ACK packet corruption, these packets are small, < 100 byte
    # Mode 3: data packet corruption, these packets are big, > 100 byte
    def corrupt(self, data, mode, thresh):
        # gen random num
        randy = random.randrange(1, 100, 1)
        if (mode == 2 and len(data) < 100):
            if randy < thresh:
                # CONVERT DATA TO BINARY AND FLIP SOME BITS
                # print(len(data))
                data = bin(int(data.hex(), 16))[2:]
                data = binarySize(data, 64)
                crpt = ''
                for i in range(64):  # invert first 64bit=8byte
                    if (data[i] == '1'):
                        crpt += '0'
                    else:
                        crpt += '1'
                corruptData = crpt + data[64:]
                # THEN CONVERT BACK TO BYTES
                corruptData = int(corruptData, 2).to_bytes(8, byteorder='big', signed=False)
                # print(len(corruptData))
            else:
                corruptData = data
        elif (mode == 3 and len(data) > 100):
            if randy < thresh:
                # CONVERT DATA TO BINARY AND FLIP SOME BITS
                # print(len(data))
                data = bin(int(data.hex(), 16))[2:]
                crpt = ''
                for i in range(64):  # invert first 64bit=8byte
                    if (data[i] == '1'):
                        crpt += '0'
                    else:
                        crpt += '1'
                corruptData = crpt + data[64:]
                # THEN CONVERT BACK TO BYTES
                corruptData = int(corruptData, 2).to_bytes(1024, byteorder='big', signed=False)
                # print(len(corruptData))
            else:
                corruptData = data
        else:  # mode 1, 4, 5, or data that doesn't match current mode
            # no need to corrupt this data
            corruptData = data
        return corruptData


if __name__ == "__main__":
    # initialize server info
    sndrName = '127.0.0.1'
    sndrPort = 10420

    # create sender primed for reliable data transport and bind to local port

    # 1ST & 2ND INPUTS: receiver name and port
    # 3RD INPUT: go-back-n frame size
    # 4TH INPUT: message receive timeout number in seconds (mostly used for sender)
    # 5TH INPUT: optional, error simulation mode (1 is no errors and the default, 2-5 remaining options)
    # 6TH INPUT: optional, debug mode (0 is very few feedback print messages and the default, 1 prints much more info to terminal)
    Sender = RDT3(sndrName, sndrPort, 10, 0.03, 1, 1)  # timeout of 0.03 is pretty good
    Sender.UDPsocket.bind(('', sndrPort))
    print("Socket Binded")

class receivethread(threading.Thread):
    def __init__(self):
        threading.Thread.__init__(self)

    def run(self):
            tSend()


root.mainloop()
